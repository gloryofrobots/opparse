"""
Syntax supports custom operators and function calls via juxtaposition
like f arg1 arg2 (f2 arg3 arg4) arg5

SOME OF THE OPERATORS DEFINED INTERNALLY AND SOME BELOW
Precedence    Operator
    100           . . .{ .( .[
    95           JUXTAPOSITION
    60           ::
    50           *  /
    40           +  - ++
    35           ==  !=  <  <=  >  >=
    30           and
    25           or << >>
    20           |>
    15           " ." @ as <|
    10           = :=
"""
// Prelude

from obin.lang._types import (Bool, Char, Int, Float, Symbol, String, List, Vector, Tuple, Map,
                             Function, Method, Fiber, Trait, Datatype, Union, LazyVal, Env)


import affirm

prefix - negate
prefix ! !
infixr := := 10
infixl <| <| 15
infixl |> |> 20
infixl << << 25
infixl >> >> 25
infixl < < 35
infixl > > 35
infixl >= >= 35
infixl <= <= 35
infixl == == 35
infixl != != 35
infixl ++ ++ 40
infixl + + 40
infixl - - 40
infixl * * 50
infixl / / 50

type Ordering
    | LT | GT | EQ

trait Eq for x
    def == x y
    def != x y -> not (x == y)

trait Ord for x of Eq
    def <= x y
    def < x y -> (cmp x y) == LT
    def >= x y -> (cmp x y) != LT
    def > x y -> (cmp x y) == GT

    def cmp x y ->
                if x == y then EQ
                elif x <= y then LT
                else GT

    def max x y -> if x <= y then y else x
    def min x y -> if x <= y then x else y


trait Num for x
    def - x y
    def + x y
    def * x y
    def / x y
    def mod x y
    // unary -
    def negate x

trait Str for self
    def str self

//YOU need kinds here
//trait FromStr for self of ToStr
//    def from_str self

trait Repr for self of Str
    def repr self -> str self

trait Sized for self
    def len self
    def is_empty self -> len self == 0

trait Collection for self
    def put key value self
    def at key self
    def del obj self
    def elem key self


trait Seq for self
    def first self
    def rest self

trait Emptiable for self
    def empty self

trait Consable for self
    def cons value self

trait Prependable for self
    // prepend/cons operator
    def prepend value self

trait Appendable for self
    //concat operator
    def ++ self other
    def append value self

trait Dict for self of Collection
    def keys self
    def values self

trait Indexed for self of Sized
    def index_of obj self
//    def indexes self
//    def last_index self -> len self - 1
//    def at_index idx self -> at idx self

trait Seqable for self
    def to_seq self
//    def from_seq seq self

trait Sliceable for self
    def slice first . last . self
    def drop count self
    def take count self


trait Bounded for self
    def lower_bound self
    def upper_bound self


trait Range for self
    def range self last
    def range_by self last step

    def range_from self
    def range_from_by self step


trait Ref for self
    def ! self

trait MutRef for self of Ref
    def := self value

type Option
    | Some val
    | None

implement types.TestTrait for X
    def f a of X b c -> 42
    def f a of X b c -> 42


implement types.TestTrait for X
    def test_method_1 a1 of X a2 of X self -> a1.x a2.x self.x
    def test_method_2 a1 self a2 -> a1.x a2.x self.x
    def test_method_3 self a1 a2 -> a1.x a2.x self.x
    def test_method_4 self
        | x -> self.x
        | y -> 42
    def test_method_3 self a1 a2 -> a1.x a2.x self.x

implement X.x for T.t

extend Tuple with Eq

extend Tuple
    with Seq
        def first self -> _list.head self
        def rest self -> _list.tail self


extend List
    with Eq
    with Seq
        def first self ->
            match x with
                | 1 -> 2
                | 3 -> 4
            _list.head self
        def rest self -> _list.tail self
    with Consable
        def cons value self -> _list.cons value self
    with Seqable
        def to_seq self ->
            match x with
                | 1 -> 2
                | 3 -> 4
    with Sized
        def len self -> _list.length
        def is_empty self -> _list.is_empty self
    with Emptiable
        def empty self -> []
    with Collection
        def put key value self -> _list.put key value self
        def at key self -> _list.at key self
        def del key self -> _list.del key self
        def elem key self -> _list.elem key self
    with Sliceable
        def slice first last self -> _list.slice first last self
        def drop count self -> _list.drop count self
        def take count self -> _list.take count self

type Maybe | Nothing
           | Just v

type Maybe
    | Nothing
    | Just v


type None

type Vec2 p1 p2

type P4 x y z c

type Shape
    | X x
    | Y y
    | Point x y
    | Square width height
    | Rect left top right bottom
    | Line point1 point2
    | Empty

fun not_elem x c -> not (elem x c)
fun identity x -> x

fun |> x f -> f x
fun <| f x -> f x
fun >> f g x -> g (f x)
fun << f g x ->  f (g x)

fun twice f -> f >> f
fun flip f x y -> f y x
fun even x -> mod x 2 == 0
fun odd x -> not (even x)
fun inc x -> x + 1
fun dec x -> x - 1

fst = at 0
snd = at 1
thrd = at 2
frth = at 3
fun last coll -> at ((len coll) - 1) coll


fun foldl func accumulator coll
    | f acc [] -> acc
    | f acc hd::tl -> foldl f (f hd acc) tl

fun foldr func accumulator coll
    | f acc [] -> acc
    | f acc hd::tl -> f hd (foldr f acc tl)

fun reduce f l
    | f x::xs -> foldl f x xs
    | f [] -> throw EmptySeqError l

fun sort f s ->
    fun _merge s1 s2
        | [] ys -> ys
        | xs [] -> xs
        | x::xs y::ys ->
            if f x y then x :: _merge xs (y::ys)
            else y :: _merge (x::xs) ys

    fun _sort s
        | [] -> []
        | [x] -> s
        | xs ->
            (ys, zs) = split xs
            _merge (_sort ys) (_sort zs)

    _sort s


fun range (first of Int) (last of Int) ->
    step = if last < 0 then -1 else 1
    range_by first last step

fun range_by (first of Int) (last of Int) (step of Int) ->
    fun _range_by N X D L
        | N X D L when N >= 4 ->
            Y = X - D
            Z = Y - D
            W = Z - D
            _range_by (N - 4)  (W - D)  D  (W :: Z :: Y :: X :: L)

        | N X D L when N >= 2 ->
            Y = X - D
            _range_by (N - 2) (Y - D) D (Y :: X :: L)

        | 1 X _ L -> X :: L

        | 0 _ _ L -> L


    if step > 0 and first - step <= last or
            step < 0 and first - step >= last then

        n = ((last - first + step) / step) - 1
        _range_by n (step * (n - 1) + first) step []

    elif step == 0 and first == last then
        _range_by 1  first step []
    else
        throw (#InvalidRange, first, last, step)

// test

fun t1() ->
    tup1 = (1, "Hello", 35.44555)
    affirm.is_equal tup1 (1, "Hello", 35.44555)
    affirm.is_equal tup1.0 1
    affirm.is_equal tup1.1 "Hello"
    affirm.is_equal tup1.2 35.44555
    affirm.is_equal (1, "Hello", 35.44555).2   35.44555
    affirm.is_equal (1,2, ["Alice", "Bob", (45,), 54.000000001]).2 ["Alice", "Bob", (45,), 54.000000001]

    affirm.is_equal (1,2, ["Alice", "Bob", (45,), 54.000000001]).2 ["Alice", "Bob", (45,), 54.000000001]

    m1 = {name="XXX"}
    affirm.is_equal {name="XXX"}.name "XXX"
    affirm.is_equal m1.name "XXX"
    affirm.is_not_equal m1.name . "YYY"

    t2 = ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Bob"})

    affirm.is_equal t2 ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Bob"})
    affirm.is_not_equal t2 ((1,2, ["Alice", "Bob", (45,), 54.000000001]), {name="Alice", surname= "Alice"})
    affirm.is_equal t2 t2

    affirm.is_true if 5 > 4 then True else False
    affirm.is_false if 5 < 4 then True else False
    affirm.is_false if 5 == 4 then True else False
    affirm.is_equal (if 13 == 12 then 42 * 2 else if 13 == 14 then 12 * 2 else 1 end end) 1

    a2_4 = #four
    a2 = [0, 1, 2, a2_4]
    affirm.is_true (#four `elem` a2)
    affirm.is_true (a2_4 `elem` a2)

    affirm.is_equal "name" #name
    affirm.is_equal #name "name"
    affirm.is_equal #"++++ ---- <> $$" "++++ ---- <> $$"
    affirm.is_equal "++++ ---- <> $$" #"++++ ---- <> $$"

    x = 12
    affirm.is_equal if x == 13 then 1 + 1
                    elif x == 14 then 2 + 2
                    elif x == 15 then 3 + 3
                    else 4 + 4 end .
                    8


    affirm.is_equal try
                        throw (1,2,"ERROR")
                    catch
                        | err @ (1, y, 3) -> #first
                        | (1,2, "ERROR@") -> #second
                        | err @ (1, 2, x) -> #third
                    finally ->
                        (#fourth, err, x)
                    end .
                    (#fourth, (1, 2, "ERROR"), "ERROR")
fun t2 () ->
    fun id x -> x
    fun sum_list_3 list
        | [x,y,z] -> x + y + z
    fun sum x y -> x + y

    V53 = sum 1 .
            (sum_list_3
                [id 1,
                 id (id 2),
                 id (id (id 3))
                ]) +
        (sum 10 .
            (sum_list_3
                [lam x -> x end 11,
                 lam x
                    | x -> x end (lam x -> x end 12),
                 lam x ->
                    x
                 end (lam x -> x end (lam x -> x end 13))
                ]))
    affirm.is_equal V53 53


fun t3() ->
    fun f1 a
        | 0 -> 1
        | 1 -> 2
        | 2 -> 3

    affirm.is_equal (f1 0) 1

    fun f2 a | 0 -> 1
             | 1 -> 2
             | 2 -> 3

    affirm.is_equal (f2 0) 1

    fun f3 a b c | 0 1 c -> c

    affirm.is_equal (f3 0 1 42) 42

    fun f4 (()) -> ((()))

    affirm.is_equal (f4 ()) ()

    fun f5 () -> [42,43,44]
                 (42,43,44)

    affirm.is_equal (f5 ()) (42,43,44)

    fun f6 a b c ->
        lam a b c -> 42 end a b c

    affirm.is_equal (f6 1 2 3) 42


fun t4 () ->
    l = lam x y z -> 42
    affirm.is_equal (l 1 2 3) 42

    l1 = lam x y z -> 42 end
    affirm.is_equal (l1 1 2 3) 42

    l2 =
        lam x y z | [hd::tl] (1,2,3) {x=2, y=3} -> 24
                  | _ y z -> 23

    affirm.is_equal (l2 [[1,2]] (1,2,3) {x=2, y=3}) 24

    affirm.is_equal (
        lam x y z
            | [hd::tl] (1,2,3) {x=2, y=3} -> 24
            | _ y z -> 23
        end [[1,2]] (1,2,3) {x=2, y=3}) 24


    affirm.is_equal (lam x -> x + 1 end 34) 35


    affirm.is_equal .
        ( lam x y z
            | 1 2 3 -> 11
            | 2 4 5 -> 22
          end
                    1
                        2

                         3) . 11
    T =
        (1,2, lam x | 1 -> 25
                    | 2 -> 13 end, 25)

    affirm.is_equal (T.2 2) 13

    T1 =
        (1,
         lam x | 5 -> 25
               | 6 -> 45 end,
         lam x
            | 5 -> 25
            | 6 -> 45 end,
         lam x -> 25 end,
         25)

    affirm.is_equal (T1.1 5) 25
    affirm.is_equal (T1.2 5) 25
    affirm.is_equal (T1.3 5) 25

    T4 =
        (1
         ,2,
            3)

    affirm.is_equal T4 (1,2,3)

    T5 =
        (1
        , lam x | 5 -> 25
                | 6 -> 45
        , lam x
            | 5 -> 25
            | 6 -> 45
        , lam x -> x
        //WARNING PREV LAMBDA is closed by dedent and as we inside a free block expression evaluates to call
        // lam x -> x end 45
        45)

    affirm.is_equal (T5.1 6) 45
    affirm.is_equal (T5.2 6) 45
    affirm.is_equal (T5.3) 45

    T10 =
        (1
        , lam x | 5 -> 25
                | 6 -> 45
        , lam x
            | 5 -> 25
            | 6 -> 45
        , lam x -> x
        //WARNING PREV LAMBDA is closed by dedent and as we inside a free block expression evaluates to call
        // lam x -> x end 45
        ,45)

    affirm.is_equal (T10.1 6) 45
    affirm.is_equal (T10.2 6) 45
    affirm.is_equal (T10.3 45) 45

    T6 =
        (1,
   2,
3
)
    affirm.is_equal T6 (1,2,3)



    affirm.is_equal (2;, 3) (2,3)

    T7 =
        lam x -> x end .
        (
            lam x ->
                1
            end
            , 3
            , 1
            , 4
            , 5
        )
    affirm.is_equal (T7.0 12313123) 1

    affirm.is_equal .
         (
            lam x ->
                x
            end .
                3
          , 1
          , 4
          , 5
        ).0 . 3

    //////////////////////////////////////////////////////
    M1 =
        {x=1,
 x=2,

 l=lam x y
    | 1 2 -> 1
    | 2 3 -> 2 end,
    n = 1
    }

    affirm.is_equal M1.x 1
    affirm.is_equal (M1.l 2 3) 2

    I1 =
        if 2 == 2 then
            2
        else
            4


    affirm.is_equal I1 2

    I2 =
        if 2 == 1 then
                              2
        elif 3 == 4 then
            3
        elif {x=1, y=2} == (1,2,3) then 4
        else 5


    affirm.is_equal I2 5

    MT1 =
        match (1,2,3) with | (x,y,z) -> 2
                           | _ -> 1

    affirm.is_equal MT1 2

    MT2 =
        match (1,2,3)
        with | (x,y,z) -> 2
             | _ -> 1

    affirm.is_equal MT2 2

    MT3 =
        match lam x ->
                  1
              end
        with
            | Y ->
               lam t
                    | (a,b) -> a + b end .
                    (1 + 1, 2 + 2)
            | _ -> 2

    affirm.is_equal MT3 6

    MT4 =
        match if 2 == 1 then
                 2
              else
                3
              end
        with
            | 2 -> 3
            | 3 -> 2

    affirm.is_equal MT4 2

    affirm.is_equal .
        match 1 with
            | x -> 3
            | _ -> 2 end . 3

    affirm.is_equal match 1 with 1 -> 4 end 4
    affirm.is_equal .
        match 1 with
            x -> 4
        end . 4

    affirm.is_equal (
        match
            if 0 == 1 then
                1
            else
                lam x y -> x + y
            end 3 .
                4
        with
            | 6 -> 3
            | 7 -> 42
        ) 42

    affirm.is_equal if 1 == 1 then 1; else 2; end 1


fun t5() ->
    a = 3
    -1
    affirm.is_equal a 3

    x =   1
        + 2
        + 3
        + 4

    affirm.is_equal x 10

    y = x
            + 3
                + 2 +
        5

    affirm.is_equal y 20

fun test_let() ->
    x = 1
    y = 2
    let
        x = 11
        y = 12
    in
        affirm.is_equal x 11
        affirm.is_equal y 12

    let x = 111 in affirm.is_equal x 111

    let x = 1111; y = 2222; in affirm.is_equal x 1111; affirm.is_equal y 2222

    let x = 222
        y = 333 in affirm.is_equal x 222
                   affirm.is_equal y 333
    let x = 444
        y = 555
    in affirm.is_equal x 444
       affirm.is_equal y 555

    affirm.is_equal x 1
    affirm.is_equal y 2

    v = let x = 1; y = 2 in x + y
    affirm.is_equal v 3

