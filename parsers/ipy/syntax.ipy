def t():
    1 + 2 +
    3 - 2 * n.
    name.
    surname - 1


x.y(1,2,3,4,)
(1,2,3,4,)
(x.y.z() + t(1,))
[1,2,3,4]
[1,2,3,4,[5,6,7](A,B),[ETY+TYR,None]]

{"x":"y", 4:67, "Bob":(1,2,[2,3],{"Bob":"bob","Alice":"alice"})}

def add(x, y): print(x,y)
               z = x + y
               return z

def sub(x, y):
    print(x,y)
    z = x - y
    return z

def mul(x, y): print(x,y); z = x * y; return z;

def f(a1,a2, *args, **kwargs):
    a1 + a2 in args and a1 / a2 not in kwargs

def foldl(func, acc, it):
    for i in it:
        try:
            acc = func(i, acc)
        except StopIteration as e:
               return acc
    return acc


for i,j in range(0,10):
    print(i+j)

for i in [1,2,3,4,5]:
    if i == 2:
       break
    else:
       print(i)
       continue

def map(it, func):
    for i in it: try:v = func(it)
                     yield v
                 except StopIteration as e: print("map interrupted on %s" % str(it)); return None


map([1,2,3,4,5], lambda i: i + 1)



if 1 == 2: print("1 == 2")
           raise SystemExit(-1)
elif 2 == 4 or 5 == 6:
     raise SystemExit(-2)
elif "Cow" == "Horse" and ("Dog" is "Cat" or "Fish" is "Bird"): raise SystemExit(-3)
else:
    print ("Everything is alright")

try:
    kill_all_humans()
    kill_all_cats()
    enjoy()
except MoralGroundException as e:
    print("Common")
except NotEnoughAmmo as e:
    print("Go get some")
except:
    print("WTF?")
finally:
    sleep_well()


a is not b is a is not d
c not in a in d not in v


map([1,2,3,4,5], fun (i): a = add(i, 2) / 42
                          b = a + 2 + mul(add(i,i),i)
                          c = b + 42 + div(42, 42)
                          return  a + b + c
                 end)

map([1,2,3,4,5], (lambda i: i + 1), [1,2,3,4,5])

map([1,2,3,4,5], fun(i):
                        if  i < 0:
                            i * -1
                        else:
                            i
                 end)

foldl(if 1 == 1:
         lambda x,y : x + y
      else:
         lambda x,y: x - y
      end, 0, range(10))


foldl((lambda x,y : x + y)
             if 1==1 else (lambda x,y: x - y),
                 0, [1,2,3,4,5,6,7,8])


foldl((lambda x,y:
              x + y)
         if 1==1
                                  else
           (lambda x,y:
                                x - y), 0, [1,2,3,4,5,6,7,8])



class X(Y,Z,object):
      class Inner:
            def __init__(self):
                pass
            method2 = lambda : 42
            method = fun(self, x, **kwargs):
                           return self

      def __init__(self, arg1, arg2, *args, **kwargs):
          self.arg1 = arg1
          for i in args:
              print(i)
          kwargs[0] = 1
          kwargs["X"] = 2

      def method(self, o):
          o.method2()

      # classes as expressions
      def method2(self):
          self.method(class _(object):
                           def method2(self):
                               raise SystemExit()
                      end ()).method(Inner())
